#!/usr/bin/env bash
LC_ALL=C

# Display help usage
function usage () {
  echo
  echo "Usage"
  echo "  $0 --flavour <ubuntu flavour> --img ubuntu-20.04.1-preinstalled-server-arm64+raspi.img"
  echo
  echo "Available Ubuntu flavours are"
  echo "  ubuntu"
  echo "  ubuntu-mate"
  echo "  ubuntu-mate-minimal"
}

function sync_from() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
        echo "ERROR! Source stages to sync were not passed."
        exit 1
    fi

    local B_SOURCE="${1}"
    local R_SOURCE="${2}"

    if [ -d "${B}" ] && [ -d "${R}" ]; then
        echo "Syncing from ${B_SOURCE}..."
        rsync -aHAXx --delete "${B_SOURCE}/" "${B}/"
        echo "Syncing from ${R_SOURCE}..."
        rsync -aHAXx --delete "${R_SOURCE}/" "${R}/"
    else
        echo "ERROR! Either ${B} or ${R} do not exist!"
        exit 1
    fi
}

function nspawn() {
    # Create basic resolv.conf for bind mounting inside the container
    echo "nameserver 1.1.1.1" > "${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/resolv.conf"

    # Make sure the container has a machine-id
    systemd-machine-id-setup --root "${R}" --print

    # Bind mount resolv.conf and the firmware, set the hostname and spawn
    systemd-nspawn \
      --resolv-conf=off \
      --bind-ro=${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/resolv.conf:/etc/resolv.conf \
      --bind=${B}:/boot/firmware \
      --hostname="${FLAVOUR}" \
      --machine="${IMG_ARCH}-${FLAVOUR}-${REL_VER}" \
      --directory "${R}" "$@"
}

function stage_00_tools() {
    # Required tools on the host
    apt-get -y install binfmt-support debootstrap \
    git qemu-user-static rsync systemd-container \
    ubuntu-keyring whois xz-utils
}

function stage_01_unpack() {
    # Capture the patition details.
    BOOT_PARTITION=`fdisk -l "${IMG}" | grep "c W95 FAT32 (LBA)"`
    ROOT_PARTITION=`fdisk -l "${IMG}" | grep "83 Linux"`
    echo "${BOOT_PARTITION}"
    echo "${ROOT_PARTITION}"

    # Grab the starting sector of the partitions.
    BOOT_START_SECTOR=`echo "${BOOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $2}'`
    ROOT_START_SECTOR=`echo "${ROOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $2}'`

    # Calculate the start byte of the partitions.
    ((BOOT_START_BYTE=${BOOT_START_SECTOR} * 512))
    ((ROOT_START_BYTE=${ROOT_START_SECTOR} * 512))

    BOOT_SECTOR_LENGTH=`echo "${BOOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $4}'`
    ROOT_SECTOR_LENGTH=`echo "${ROOT_PARTITION}" | sed -e 's/\*//g' | awk '{print $4}'`

    # Calculate the byte length of the partitions.
    ((BOOT_BYTE_LENGTH=${BOOT_SECTOR_LENGTH} * 512))
    ((ROOT_BYTE_LENGTH=${ROOT_SECTOR_LENGTH} * 512))

    mkdir -p "${TMP_DIR}"/{boot,root}
    mkdir -p "${B}"
    mkdir -p "${R}"
    # Mount the partitions to the mount points.
    BOOT_MOUNT=$(mount -v -o offset=${BOOT_START_BYTE},sizelimit=${BOOT_BYTE_LENGTH} -t vfat "${IMG}" "${TMP_DIR}/boot")
    ROOT_MOUNT=$(mount -v -o offset=${ROOT_START_BYTE},sizelimit=${ROOT_BYTE_LENGTH} -t ext4 "${IMG}" "${TMP_DIR}/root")
    BOOT_DEV=$(echo "${BOOT_MOUNT}" | cut -d' ' -f2)
    ROOT_DEV=$(echo "${ROOT_MOUNT}" | cut -d' ' -f2)
    rsync -aHAXx --delete "${TMP_DIR}/boot/" "${B}/"
    rsync -aHAXx --delete "${TMP_DIR}/root/" "${R}/"
    umount -l "${TMP_DIR}/boot"
    umount -l "${TMP_DIR}/root"
    rm -rf "${TMP_DIR}/boot"
    rm -rf "${TMP_DIR}/root"
}

function stage_02_apt() {
    # Remove old kernel
    local OLD_KERNEL=$(ls -1 ${R}/lib/modules/ | head -n1)
    local OLD_KERNEL_SHORT=$(echo ${OLD_KERNEL} | sed s'/-raspi//')
    echo ${OLD_KERNEL}
    echo ${OLD_KERNEL_SHORT}

    # Remove most of the server components
    nspawn apt -y purge --autoremove bcache-tools btrfs-progs byobu \
    cloud-init cloud-initramfs-copymods cloud-initramfs-dyn-netconf curl \
    eatmydata ethtool finalrd git htop landscape-common lvm2 \
    lxd-agent-loader mdadm multipath-tools open-iscsi openssh-server \
    openssh-sftp-server overlayroot screen sosreport tmux vim xfsprogs

    if [ "${REL_VER}" == "20.04" ]; then
    nspawn apt -y dist-upgrade
    nspawn apt -y remove linux-image-${OLD_KERNEL} linux-modules-${OLD_KERNEL} linux-raspi-headers-${OLD_KERNEL_SHORT}

    # Copy new devicetree, overlays and kernel to /boot/firmware
    local NEW_KERNEL=$(ls -1 ${IMG_ARCH}/${FLAVOUR}/root/boot/vmlinuz-* | head -n 1 | cut -d'/' -f5 | cut -d'-' -f2-4)
    echo ${NEW_KERNEL}
    cp -v ${R}/lib/firmware/${NEW_KERNEL}/device-tree/*.dtb ${B}/
    cp -v ${R}/lib/firmware/${NEW_KERNEL}/device-tree/broadcom/*.dtb ${B}/
    cp -v ${R}/lib/firmware/${NEW_KERNEL}/device-tree/overlays/* ${B}/overlays/
    cp -v ${R}/boot/vmlinuz-${NEW_KERNEL} ${B}/vmlinuz
    cp -v ${R}/boot/initrd.img-${NEW_KERNEL} ${B}/initrd.img

        nspawn apt-add-repository --yes ppa:ubuntu-pi-flavour-makers/ppa
    fi
    nspawn apt -y update
    nspawn apt -y dist-upgrade
    nspawn apt -y install ${DESKTOP_PACKAGES}^
    nspawn apt -y install cloud-initramfs-growroot libgles1 libopengl0 libraspberrypi0 libraspberrypi-bin libxvmc1 pi-bluetooth rpi-eeprom

    # wget "https://addons.mozilla.org/firefox/downloads/file/3398929/h264ify-1.1.0.xpi" -O "${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/h264ify.xpi"
    # mkdir "${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/moz"
    # cd "${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/moz"
    # bsdtar -xf "${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/h264ify.xpi"
    # sed -i 's/\[ "storage" \]/\[ "storage" \],     \
    #   "browser_specific_settings": {               \
    #     "gecko": {                                 \
    #       "id": "jid1-TSgSxBhncsPBWQ@jetpack"      \
    #     }                                          \
    #   }/' manifest.json
    #   bsdtar -caf h264ify.zip *
    # install -Dm644 h264ify.zip "${R}/usr/share/mozilla/extensions/{ec8030f7-c20a-464f-9b0e-13a3a9e97384}/jid1-TSgSxBhncsPBWQ@jetpack.xpi"
    # rm -rf "${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/${REL_VER}/moz"
}

function stage_03_snap() {
    local REL_VER=$(echo ${IMG_VER} | cut -d'.' -f1-2)
    local SEED_CHANNEL="stable/ubuntu-${REL_VER}"

    # Remove existing seeded snaps.
    rm -v ${R}/etc/systemd/system/snap-*.mount
    rm -v ${R}/etc/systemd/system/snap.lxd.*
    rm -v ${R}/etc/systemd/system/multi-user.target.wants/snap-*.mount
    rm -rfv ${R}/snap/*
    rm -rfv ${R}/var/lib/snapd/seed/*
    rm -fv ${R}/var/lib/snapd/snaps/*.snap
    rm -fv ${R}/var/lib/snapd/state.json
    rm -fv ${R}/var/lib/snapd/system-key
    mkdir -p ${R}/var/lib/snapd/seed/{assertions,snaps}
    snap known --remote model series=16 model=generic-classic brand-id=generic > ${R}/var/lib/snapd/seed/assertions/model
    local ACCOUNT_KEY=$(grep "^sign-key-sha3-384" ${R}/var/lib/snapd/seed/assertions/model | cut -d':' -f2 | sed 's/ //g')
    snap known --remote account account-id=generic > ${R}/var/lib/snapd/seed/assertions/account
    snap known --remote account-key public-key-sha3-384="${ACCOUNT_KEY}" > ${R}/var/lib/snapd/seed/assertions/account-key

    nspawn snap download --target-directory=/var/lib/snapd/seed/snaps core18
    nspawn snap download --target-directory=/var/lib/snapd/seed/snaps snapd
    if [ "${FLAVOUR}" == "ubuntu" ]; then
        nspawn snap download --target-directory=/var/lib/snapd/seed/snaps --channel=${SEED_CHANNEL} gnome-3-34-1804
        nspawn snap download --target-directory=/var/lib/snapd/seed/snaps --channel=${SEED_CHANNEL} gtk-common-themes
        nspawn snap download --target-directory=/var/lib/snapd/seed/snaps --channel=${SEED_CHANNEL} snap-store
        nspawn snap prepare-image \
            --arch="${IMG_ARCH}" \
            --classic \
            --snap=core18 \
            --snap=snapd \
            --snap=gnome-3-34-1804=${SEED_CHANNEL} \
            --snap=gtk-common-themes=${SEED_CHANNEL} \
            --snap=snap-store=${SEED_CHANNEL} \
            /var/lib/snapd/seed/assertions/model /
    elif [ "${FLAVOUR}" == "ubuntu-mate" ] || [ "${FLAVOUR}" == "ubuntu-mate-minimal" ]; then
        nspawn snap download --target-directory=/var/lib/snapd/seed/snaps --channel=${SEED_CHANNEL} ubuntu-mate-welcome
        nspawn snap download --target-directory=/var/lib/snapd/seed/snaps software-boutique
        nspawn snap download --target-directory=/var/lib/snapd/seed/snaps ubuntu-mate-pi
        nspawn snap prepare-image \
            --arch="${IMG_ARCH}" \
            --classic \
            --snap=core18 \
            --snap=snapd \
            --snap=ubuntu-mate-welcome=${SEED_CHANNEL} \
            --snap=software-boutique \
            --snap=ubuntu-mate-pi \
            /var/lib/snapd/seed/assertions/model /
    fi
    mv ${R}/var/lib/snapd/seed/snaps/*.assert ${R}/var/lib/snapd/seed/assertions/
    rm -f ${R}/var/lib/snapd/seed/assertions/*.account
    rm -f ${R}/var/lib/snapd/seed/assertions/*.account-key
    rm -f ${R}/var/lib/snapd/seed/assertions/*.snap-declaration
    rm -f ${R}/var/lib/snapd/seed/assertions/*.snap-revision
}

function stage_04_config() {
# Instruct netplan to hand all network management to NetworkManager
    cat <<EOM > "${R}/etc/netplan/01-network-manager-all.yaml"
# Let NetworkManager manage all devices on this system
network:
  version: 2
  renderer: NetworkManager
EOM

    # Disable cloud-init from managing the network
    echo "network: {config: disabled}" > ${R}/etc/cloud/cloud.cfg.d/99-disable-network-config.cfg

# Disable the serial UART
sed -i 's/enable_uart=1/enable_uart=0/' "${B}/syscfg.txt"
sed -i 's/enable_uart=1/enable_uart=0/' "${B}/config.txt"

echo                            >> ${B}/config.txt
echo "disable_overscan=1"       >> ${B}/config.txt
echo "dtoverlay=vc4-fkms-v3d"   >> ${B}/config.txt
echo "gpu_mem=128"              >> ${B}/config.txt
echo "hdmi_drive=2"             >> ${B}/config.txt

echo "net.ifnames=0 dwc_otg.lpm_enable=0 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc quiet splash" > "${B}/cmdline.txt"

# Disable Wifi power saving to improve WiFi performance on the Pi
cat <<EOM > "${R}/etc/NetworkManager/conf.d/ZZraspi-wifi-powersave-off.conf"
[connection]
wifi.powersave = 2
EOM

local DATE=""
DATE=$(date +%m%H%M%S)
local PASSWD=""
PASSWD=$(mkpasswd -m sha-512 oem "${DATE}")
nspawn addgroup --gid 29999 oem
nspawn adduser --gecos "OEM Configuration (temporary user)" --add_extra_groups --disabled-password --gid 29999 --uid 29999 oem
nspawn usermod -a -G adm,sudo -p "${PASSWD}" oem
nspawn apt-get -y install --no-install-recommends oem-config-gtk ubiquity-frontend-gtk ubiquity-ubuntu-artwork

if [ "${FLAVOUR}" == "ubuntu" ]; then
    nspawn apt-get -y install --no-install-recommends oem-config-slideshow-ubuntu
elif [ "${FLAVOUR}" == "ubuntu-mate" ] || [ "${FLAVOUR}" == "ubuntu-mate-minimal" ]; then
    nspawn apt-get -y install --no-install-recommends oem-config-slideshow-ubuntu-mate
    # Force the slideshow to use Ubuntu MATE artwork.
    sed -i 's/oem-config-slideshow-ubuntu/oem-config-slideshow-ubuntu-mate/' $R/usr/lib/ubiquity/plugins/ubi-usersetup.py
    sed -i 's/oem-config-slideshow-ubuntu/oem-config-slideshow-ubuntu-mate/' $R/usr/sbin/oem-config-remove-gtk
    sed -i 's/ubiquity-slideshow-ubuntu/ubiquity-slideshow-ubuntu-mate/' $R/usr/sbin/oem-config-remove-gtk
fi

# Create files/dirs Ubiquity requires
mkdir -p "${R}/var/log/installer"
touch "${R}/var/lib/oem-config/run"
touch "${R}/var/log/installer/debug"
touch "${R}/var/log/syslog"
nspawn chown syslog:adm /var/log/syslog
nspawn /usr/sbin/oem-config-prepare --quiet

if [ "${FLAVOUR}" == "ubuntu-mate" ] || [ "${FLAVOUR}" == "ubuntu-mate-minimal" ]; then
    cat <<EOM > "${R}/usr/share/glib-2.0/schemas/50_ubuntu-mate-raspi-tweaks.gschema.override"
[org.mate.interface]
enable-animations=false

[org.mate.Marco.general]
compositing-manager=false

[org.mate.session.required-components]
windowmanager='marco-no-composite'
EOM
    nspawn glib-compile-schemas /usr/share/glib-2.0/schemas/
fi

# Create Raspberry Pi specific groups.
nspawn groupadd -f --system gpio
nspawn groupadd -f --system i2c
nspawn groupadd -f --system input
nspawn groupadd -f --system spi

cat <<'EOM' > "${R}/usr/local/sbin/adduser.local"
#!/bin/sh
# This script is executed as the final step when calling `adduser`
# USAGE:
#   adduser.local USER UID GID HOME

# Add user to the Raspberry Pi specific groups
usermod -a -G adm,gpio,i2c,input,spi,video $1
EOM
chmod 755 "${R}/usr/local/sbin/adduser.local"

cat <<'EOM' > "${R}/etc/fstab"
LABEL=writable      /               ext4    defaults,noatime,x-systemd.growfs   0   0
LABEL=system-boot   /boot/firmware  vfat    defaults                            0   1
EOM
}

function stage_05_clean() {
    nspawn apt-get -y autoremove
    nspawn apt-get -y autoclean
    nspawn apt-get -y clean
    rm -f $R/etc/ssh/ssh_host_*_key*
    rm -f $R/boot/{*.bak,*.old}
    rm -f $B/{*.bak,*.old}
    rm -f $R/etc/apt/*.save
    rm -f $R/etc/apt/sources.list.d/*.save
    rm -f $R/var/log/apt/*
    rm -f $R/var/log/alternatives.log
    rm -f $R/var/log/dpkg.log
    rm -f $R/var/log/fontconfig.log
    rm -rf $R/tmp/*
    rm -f $R/var/crash/*
    rm -f $R/var/cache/debconf/*-old
    rm -f $R/var/lib/dpkg/*-old
    [ -L $R/var/lib/dbus/machine-id ] || rm -f $R/var/lib/dbus/machine-id
    echo '' > $R/etc/machine-id
    rm -f "${B}/meta-data"
    rm -f "${B}/network-config"
    rm -f "${B}/user-data"
}

function stage_06_image() {
    # Build the image file
    local SIZE_IMG=$(du -csh "${R}" | tail -n1 | cut -d'.' -f1)
    ((SIZE_IMG+=2))
    local SIZE_BOOT="256MiB"

    # Remove old images.
    rm -fv "${TMP_DIR}/${IMG_OUT}"

    # Create an empty file file.
    dd if=/dev/zero of="${TMP_DIR}/${IMG_OUT}" bs=1MB count=1
    dd if=/dev/zero of="${TMP_DIR}/${IMG_OUT}" bs=1MB count=0 seek=$(( ${SIZE_IMG} * 1000 ))

    # Initialising: msdos
    parted -s ${TMP_DIR}/${IMG_OUT} mktable msdos
    echo "Creating /boot/firmware partition"
    parted -a optimal -s ${TMP_DIR}/${IMG_OUT} mkpart primary fat32 1 "${SIZE_BOOT}"
    echo "Creating / partition"
    parted -a optimal -s ${TMP_DIR}/${IMG_OUT} mkpart primary ext4 "${SIZE_BOOT}" 100%
    echo "Making partition 1 bootable"
    parted -s ${TMP_DIR}/${IMG_OUT} set 1 boot on

    PARTED_OUT=$(parted -s ${TMP_DIR}/${IMG_OUT} unit b print)
    BOOT_OFFSET=$(echo "${PARTED_OUT}" | grep -e '^ 1'| xargs echo -n \
    | cut -d" " -f 2 | tr -d B)
    BOOT_LENGTH=$(echo "${PARTED_OUT}" | grep -e '^ 1'| xargs echo -n \
    | cut -d" " -f 4 | tr -d B)

    ROOT_OFFSET=$(echo "${PARTED_OUT}" | grep -e '^ 2'| xargs echo -n \
    | cut -d" " -f 2 | tr -d B)
    ROOT_LENGTH=$(echo "${PARTED_OUT}" | grep -e '^ 2'| xargs echo -n \
    | cut -d" " -f 4 | tr -d B)

    BOOT_LOOP=$(losetup --show -f -o ${BOOT_OFFSET} --sizelimit ${BOOT_LENGTH} ${TMP_DIR}/${IMG_OUT})
    ROOT_LOOP=$(losetup --show -f -o ${ROOT_OFFSET} --sizelimit ${ROOT_LENGTH} ${TMP_DIR}/${IMG_OUT})
    echo "/boot/firmware: offset ${BOOT_OFFSET}, length ${BOOT_LENGTH}"
    echo "/:              offset ${ROOT_OFFSET}, length ${ROOT_LENGTH}"

    mkfs.vfat -n system-boot -S 512 -s 16 -v "${BOOT_LOOP}"
    mkfs.ext4 -L writable -m 0 "${ROOT_LOOP}"

    MOUNTDIR="${TMP_DIR}/image"
    mkdir -p "${MOUNTDIR}"
    mount -v "${ROOT_LOOP}" "${MOUNTDIR}" -t ext4
    mkdir -p "${MOUNTDIR}/boot/firmware"
    mount -v "${BOOT_LOOP}" "${MOUNTDIR}/boot/firmware" -t vfat
    echo "Syncing root..."
    rsync -aHAXx --delete ${R}/ "${MOUNTDIR}/"
    echo "Syncing boot..."
    rsync -aHAXx --delete ${B}/ "${MOUNTDIR}/boot/firmware/"
    date +"%Y%m%d" > "${MOUNTDIR}/.disk/info"
    sync
    umount -l "${MOUNTDIR}/boot/firmware"
    umount -l "${MOUNTDIR}"
    losetup -d "${ROOT_LOOP}"
    losetup -d "${BOOT_LOOP}"
    ls -lh "${TMP_DIR}/${IMG_OUT}"
    rm -rf "${MOUNTDIR}"
    echo "Compressing ${IMG_OUT}.xz"
    rm "${TMP_DIR}/${IMG_OUT}.xz" 2>/dev/null
    xz --keep -T 0 "${TMP_DIR}/${IMG_OUT}"
    ls -lh "${TMP_DIR}/${IMG_OUT}.xz"
}

function stage_07_hash() {
    local HASH="sha256"
    local KEY="FFEE1E5C"

    local OUT_HASH="${TMP_DIR}/${IMG_OUT}.xz.${HASH}"
    local OUT_SIGN="${TMP_DIR}/${IMG_OUT}.xz.${HASH}.sign"

    rm -f "${OUT_HASH}"
    rm -f "${OUT_SIGN}"

    if [ -e "${TMP_DIR}/${IMG_OUT}.xz" ]; then
        echo "Hashing ${IMG_OUT}.xz"
        ${HASH}sum "${TMP_DIR}/${IMG_OUT}.xz" > "${OUT_HASH}"
        sed -i -r "s/ .*\/(.+)/  \1/g" "${OUT_HASH}"
        gpg --default-key ${KEY} --armor --output ${OUT_SIGN} --detach-sig ${OUT_HASH}
    else
        echo "WARNING! Didn't find ${TMP_DIR}/${IMG_OUT} to hash."
    fi
}

if [ $(id -u) -ne 0 ]; then
    echo "ERROR! Root permissions required."
    exit 1
fi

# Take command line arguments
if [ $# -lt 1 ]; then
    usage
    exit 0
else
    while [ $# -gt 0 ]; do
        case "${1}" in
            -flavour|--flavour|-flavor|--flavor)
                FLAVOUR="${2}"
                shift
                shift;;
            -img|--img)
                IMG="${2}"
                if [ ! -e "${IMG}" ]; then
                    echo "[!] ERROR: ${IMG} was not found."
                    exit 1
                fi
                shift
                shift;;
            *)
                echo "[!] ERROR: \"${1}\" is not a supported parameter."
                usage
                exit 1;;
        esac
    done
fi

# Set variables based on chosen desktop environment
case "${FLAVOUR}" in
    ubuntu)
        echo "[+] Specified Ubuntu"
        DESKTOP_PACKAGES="ubuntu-desktop"
        shift;;
    ubuntu-mate)
        echo "[+] Specified Ubuntu MATE"
        DESKTOP_PACKAGES="ubuntu-mate-desktop"
        shift;;
    ubuntu-mate-minimal)
        echo "[+] Specified Ubuntu MATE (minimal)"
        DESKTOP_PACKAGES="ubuntu-mate-core"
        shift;;
    *)
        if [ -z "${FLAVOUR}" ]; then
        echo "[!] ERROR: Please specifiy an Ubuntu flavour"
        else
        echo "[!] ERROR: ${FLAVOUR} is not a valid Ubuntu flavour"
        fi
        usage
        exit 1;;
esac

TMP_DIR=$(pwd)
IMG_QUALITY="-beta2"
IMG_VER=$(echo "${IMG}" | cut -d'-' -f2)
IMG_ARCH=$(echo "${IMG}" | cut -d'+' -f1 | cut -d'-' -f5)
IMG_OUT=$(echo "${IMG}" | sed "s/ubuntu-/${FLAVOUR}-/" | sed 's/preinstalled-server-/desktop-/' | sed "s/${IMG_VER}/${IMG_VER}${IMG_QUALITY}/")
IMG_TEST=$(file -b "${IMG}" | cut -d';' -f1)
B="${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/boot"
R="${TMP_DIR}/${IMG_ARCH}/${FLAVOUR}/root"

if [ "${IMG_TEST}" == "DOS/MBR boot sector" ]; then
    stage_00_tools
    stage_01_unpack
    stage_02_apt
    stage_03_snap
    stage_04_config
    stage_05_clean
    stage_06_image
    stage_07_hash
else
    echo "[!] ERROR: ${IMG} is not a valid disk image."
    if [ "${IMG_TEST}" == "XZ compressed data" ]; then
        echo "           Try decompressing ${IMG} first using:"
        echo "           unxz --decompress --keep ${IMG}"
    fi
    exit 1
fi
